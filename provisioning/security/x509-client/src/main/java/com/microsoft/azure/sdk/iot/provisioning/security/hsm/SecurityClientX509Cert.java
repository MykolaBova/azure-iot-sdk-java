/*
 *
 *  Copyright (c) Microsoft. All rights reserved.
 *  Licensed under the MIT license. See LICENSE file in the project root for full license information.
 *
 */

package com.microsoft.azure.sdk.iot.provisioning.security.hsm;

import com.microsoft.azure.sdk.iot.provisioning.security.SecurityClientX509;
import com.microsoft.azure.sdk.iot.provisioning.security.exceptions.SecurityClientException;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openssl.PEMReader;

import java.io.IOException;
import java.io.StringReader;
import java.security.Key;
import java.security.Security;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Collection;
import java.util.LinkedList;

public class SecurityClientX509Cert extends SecurityClientX509
{
    private final String commonNameLeaf;
    private X509Certificate leafCertificatePublic;
    private Key leafPrivateKey;
    private Collection<X509Certificate> signerCertificates;

    private String leafCertificatePublicPem;
    private String leafPrivateKeyPem;
    private Collection<String> signerCertificatesPem;
    /**
     * Constructor to build the DICE certs from the simulator
     */
    public SecurityClientX509Cert(String leafPublicPem, String leafPrivateKey, Collection<String> signerCertificates) throws SecurityClientException
    {
        // parameter check here...
        if (leafPublicPem == null || leafPublicPem.isEmpty())
        {
            throw new IllegalArgumentException("leaf public certificate cannot be null or empty");
        }

        if (leafPrivateKey == null || leafPrivateKey.isEmpty())
        {
            throw new IllegalArgumentException("leaf private key cannot be null or empty");
        }

        this.leafCertificatePublicPem = leafPublicPem;
        this.leafPrivateKeyPem = leafPrivateKey;
        this.signerCertificatesPem = signerCertificates;
        this.signerCertificates = new LinkedList<>();
        try
        {
            this.leafCertificatePublic = this.convertPemToCertificate(leafCertificatePublicPem);
            this.leafPrivateKey = this.convertPemToPrivateKey(leafPrivateKeyPem);
            for (String cert : signerCertificates)
            {
                this.signerCertificates.add(this.convertPemToCertificate(cert));
            }
            this.commonNameLeaf = getCommonName(this.leafCertificatePublic);
        }
        catch (IOException | CertificateException e)
        {
            throw new SecurityClientException(e);
        }
    }

    private String getCommonName(X509Certificate certificate)
    {
        //TODO : this needs testing
        return  certificate.getIssuerX500Principal().getName();
    }

    private X509Certificate convertPemToCertificate(String pem) throws IOException, CertificateException
    {
        Security.addProvider(new BouncyCastleProvider());
        PEMReader pemCert = new PEMReader(new StringReader(pem));
        Object possiblePemCert = pemCert.readObject();
        if (!(possiblePemCert instanceof X509Certificate))
        {
            throw new CertificateException("Unexpected format for public certificate");
        }
        return (X509Certificate) possiblePemCert;
    }

    private Key convertPemToPrivateKey(String pem) throws IOException, CertificateException
    {
        Security.addProvider(new BouncyCastleProvider());
        PEMReader pemCert = new PEMReader(new StringReader(pem));
        Object possiblePemKey = pemCert.readObject();
        if (!(possiblePemKey instanceof Key))
        {
            throw new CertificateException("Unexpected format for Pem Key");
        }
        return (Key) possiblePemKey;
    }

     /**
     * Getter for the common name
     * @return The common name for the root cert
     */
    @Override
    public String getClientCertificateCommonName()
    {
        //SRS_SecurityClientDiceEmulator_25_005: [ This method shall return Root certificate name as common name ]
        return commonNameLeaf;
    }

    /**
     * Getter for the Alias certificate
     * @return Alias certificate
     */
    @Override
    public X509Certificate getClientCertificate()
    {
        //SRS_SecurityClientDiceEmulator_25_006: [ This method shall return Alias certificate generated by DICE ]
        return this.leafCertificatePublic;
    }

    /**
     * Getter for Alias key
     * @return Alias private key
     */
    @Override
    public Key getClientPrivateKey()
    {
        //SRS_SecurityClientDiceEmulator_25_007: [ This method shall return Alias private key generated by DICE ]
        return this.leafPrivateKey;
    }

    /**
     * Getter for the signer cert
     * @return Signer cert
     */
    public Collection<X509Certificate> getIntermediateCertificatesChain()
    {
        return this.signerCertificates;
    }

    /**
     * Getter for the Alias cert in PEM format
     * @return Alias cert in PEM format
     */
    public String getLeafCertPem()
    {
        //SRS_SecurityClientDiceEmulator_25_009: [ This method shall return Alias certificate generated by DICE as PEM string]
        return this.leafCertificatePublicPem;
    }

    /**
     * Getter for the Signer cert in PEM format
     * @return Signer cert in PEM format
     */
    public Collection<String> getSignerCertPem()
    {
        //SRS_SecurityClientDiceEmulator_25_010: [ This method shall return Signer certificate generated by DICE as PEM string ]
        return this.signerCertificatesPem;
    }

    /**
     * Generates leaf certificate with the unique id as common name
     * @param uniqueId Unique ID to be used in common name. Cannot be {@code null} or empty
     * @return A PEM formatted leaf cert with unique ID as common name
     */
    public String generateLeafCert(String uniqueId) throws SecurityClientException
    {
        //SRS_SecurityClientDiceEmulator_25_012: [ This method shall throw SecurityClientException if unique id is null or empty ]
        if (uniqueId == null || uniqueId.isEmpty())
        {
            throw new SecurityClientException(new IllegalArgumentException("unique id cannot be null or empty"));
        }

        // TODO : Add functionality to generate leaf.
        return  null;
    }
}
